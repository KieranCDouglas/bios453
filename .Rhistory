# Basic Q-Q plot
qqnorm(residuals, main = "Q-Q Plot", pch = 19, col = "blue")
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "blue") +
stat_qq_line(color = "red", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals")
library(car)
## Check for multicolinearity among predictors.
vif_values <- vif(coremodel, type = 'predictor')
# Extract design matrix without intercept
X <- model.matrix(coremodel)[,-1]
# Create a regular lm object with the same predictors
regular_model <- lm(formula(coremodel), data = model.frame(coremodel))
# Calculate VIF on this regular model
vif(regular_model)
# Extract predictors from model
predictors <- model.frame(coremodel)[,-1]
# Calculate correlation matrix
cor_matrix <- cor(predictors, use="complete.obs")
# Visualize
library(corrplot)
## Check other MLR assumptions
plot(coremodel, which = 1)
## Check other MLR assumptions
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "blue") +
stat_qq_line(color = "red", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals")
ggplot(data = dhs_clean, mapping = aes(y = insured, x = bwkg, fill = paradrug)) +
geom_boxplot() +
theme_economist() +
scale_fill_manual(values = c("#D4C5E2", "#80CFA9")) +
labs(title = "Birthweight (kg) by Antiparasitics and Insured Status",
y = "Insurance Status",
x = "Birth Weight (kg)",
fill = "Antiparasitics While Pregnant")
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = anemia)) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(values = c("#D4C5E2", "#80CFA9"))
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = anemia)) +
geom_histogram() +
scale_fill_manual(values = c("#D4C5E2", "#80CFA9"))
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = anemia)) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(values = c("No" = "#D4C5E2", "Yes" = "#80CFA9"))
scale_fill_manual(values = c("No" = "#D4C5E2", "Yes" = "#80CFA9"))
scale_fill_manual(values = c("No" = "#D4C5E2", "Yes" = "#80CFA9"),)
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("No" = "#D4C5E2", "Yes" = "#80CFA9"),
name = "Anemia Status"
)
levels(factor(dhs_clean$anemia))  # Should return "0"/"1" or "No"/"Yes"
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#D4C5E2", "#80CFA9", "#46B29B", "#CF80A6"),
name = "Anemia Status"
)
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status"
)
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
theme_economist()
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status")
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
theme_economist()
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
theme_economist() +
labs( title = "YEA", x = "Birth Weight (kg)", y = "Count")
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
theme_economist() +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count")
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count")
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_clean()
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
theme_few()
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(
~factor(paradrug,
levels = c("No", "Yes"),
labels = c("No Antiparasitics", "Yes Parasitics"))
) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status"
) +
labs(
title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy",
x = "Birth Weight (kg)",
y = "Count"
) +
theme_few()
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug,
levels(c("no","yes"))) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
paradrug_labels <- c("0" = "No Antiparasitics", "1" = "Yes Antiparasitics")
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug, labeller = as_labeller(paradrug_labels)) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
ggplot(data = dhs_clean, mapping = aes(y = insured, x = bwkg, fill = paradrug)) +
geom_boxplot() +
theme_economist() +
scale_fill_manual(values = c("#D4C5E2", "#80CFA9")) +
labs(title = "Birthweight (kg) by Antiparasitics and Insured Status",
y = "Insurance Status",
x = "Birth Weight (kg)",
fill = "Antiparasitics While Pregnant")
#
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug, labeller = as_labeller(paradrug_labels)) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
#
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug, labeller = as_labeller(paradrug_labels)) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_economist()
#
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug, labeller = as_labeller(paradrug_labels)) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_economist(font = 12)
#
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug, labeller = as_labeller(paradrug_labels)) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
## several single stratas, merge singles for comparison
# Count PSUs per stratum
psu_counts <- dhs_clean %>%
group_by(strata) %>%
summarize(n_psu = n_distinct(ids))  # Replace 'ids' with your PSU variable name
# List strata with 1 PSU
single_strata <- psu_counts %>% filter(n_psu == 1)
print(single_strata)
single_strata <- c(1023, 3241, 3261, 57221, 57222, 62921, 83823, 84022, 84122, 84223, 84421, 84621, 84622, 84723, 89823)
#mutate
dhs_clean <- dhs_clean %>%
mutate(
strata = ifelse(strata %in% single_strata, 1024, strata)
)
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
summary(unrefined_coremodel)
## Refined core model
coremodel <- sdesign %>%
svyglm(
formula = bwkg ~ paradrug + age + ethnic + educ +
bpast5 + csect + anemia + educ*bpast5,
family = gaussian()
)
summary(unrefined_coremodel)
## Refined core model
coremodel <- sdesign %>%
svyglm(
formula = bwkg ~ paradrug + age + ethnic + educ +
bpast5 + csect + anemia + educ*bpast5,
family = gaussian()
)
summary(coremodel)
## Refined core model
coremodel <- sdesign %>%
svyglm(
formula = bwkg ~ paradrug + age + ethnic + educ +
bpast5 + csect + anemia + educ*bpast5,
family = gaussian()
)
summary(coremodel)
## Unweighted coremodel
coremodelunw <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*bpast5)
summary(coremodelunw)
## Check other MLR assumptions
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "blue") +
stat_qq_line(color = "red", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals")
ctrl <- trainControl(method = "cv", number = 5)
# Train model with k-fold CV
model_cv <- train(
bwkg ~ paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5,  # Include all predictors
data = dhs_clean,
method = "lm",
trControl = ctrl
)
# Train model with k-fold CV
model_cv <- train(
bwkg ~ paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5,  # Include all predictors
data = dhs_clean,
method = "lm",
trControl = ctrl
)
# View average RMSE and R² across folds
print(model_cv$results)
# Extract residuals from your svyglm model
residuals <- residuals(coremodel)
## Check other MLR assumptions
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "blue") +
stat_qq_line(color = "red", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals") +
theme_economist()
## Check other MLR assumptions
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "#80CFA9") +
stat_qq_line(color = "#CF80A6", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals") +
theme_economist()
## Check for multicolinearity among predictors.
vif_results <- vif(coremodel)
## Check for multicolinearity among predictors.
vif_results <- vif(coremodel, type = "predictor")
## Check for multicolinearity among predictors.
car::vif(coremodel)
# Studentized residuals (accounts for weights)
student_resids <- rstudent(coremodel)
# Q-Q plot with confidence envelope
car::qqPlot(student_resids, main = "Q-Q Plot of Studentized Residuals")
## Check other MLR assumptions
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "#80CFA9") +
stat_qq_line(color = "#CF80A6", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals") +
theme_economist()
## Check for multicolinearity among predictors.
car::vif(coremodel)
## Check for multicolinearity among predictors.
car::vif(coremodelunw)
## Check for multicolinearity among predictors.
car::vif(coremodel)
## Check for multicolinearity among predictors.
alias_model <- alias(your_model)
## Check for multicolinearity among predictors.
alias_model <- alias(coremodel)
print(alias_model$Complete)
car::vif(your_model, type = "predictor")  # Returns data frame
car::vif(coremodel, type = "predictor")  # Returns data frame
print(alias_model$Complete)
X <- model.matrix(coremodel)[,-1]  # Remove intercept
apply(X, 2, function(x) 1/(1 - summary(lm(x ~ X[,-which(colnames(X)==colnames(x))]))$r.squared))
vif_manual(your_model)
## Check for multicolinearity among predictors.
# Example: Remove all educX:bpast55 terms
coremodel_fixed <- update(coremodel, . ~ . - educ1:bpast55 - educ4:bpast55 - educ5:bpast55)
## Check for multicolinearity using VIF
indep_df <- data.frame(
paradrug, age, ethnic, educ, bpast5, csect, anemia,
data = dhs_clean
)
## Check for multicolinearity using VIF
indep_df <- data.frame(
dhs_clean$paradrug, dhs_clean$age, dhs_clean$ethnic, dhs_clean$educ, dhs_clean$bpast5, dhs_clean$csect, dhs_clean$anemia,
)
## Check for multicolinearity using VIF
# Calculate correlation matrix
cor_matrix <- cor(dhs_clean)
## Check for multicolinearity using VIF
# Calculate correlation matrix
data = dhs_clean %>%
chisq.test(table(paradrug, age, ethnic, educ, bpast5, csect, anemia))
## Check for multicolinearity
dhs_multi <- na.omit(dhs_clean)
table_data <- with(dhs_multi, table(paradrug, age, ethnic, educ, bpast5, csect, anemia))
chisq.test(table_data)
table_data <- with(dhs_multi, table(paradrug, ethnic, educ, bpast5, csect, anemia))
chisq.test(table_data)
table_data <- with(dhs_multi, table(paradrug, age, ethnic, educ, bpast5, csect, anemia))
chisq.test(table_data)
## Check for multicolinearity
dummies <- model.matrix(~ factor_var, data = dhs_clean)[, -1]  # Create dummies
## Check for multicolinearity
library(car)
dummies <- model.matrix(~ factor_var, data = dhs_clean)[, -1]  # Create dummies
dummies <- model.matrix(~ factor, data = dhs_clean)[, -1]  # Create dummies
## Check for multicolinearity
res <- cor(dhs_clean)
## Check for multicolinearity
vif_values <- vif(coremodelunw)  # Calculate VIF values
## Check for multicolinearity
vifmod <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia)
vif_values <- vif(vifmod)  # Calculate VIF values
print(vif_values)         # Display VIF values
# Extract residuals from your svyglm model
residuals <- residuals(coremodel)
#plot
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "#80CFA9") +
stat_qq_line(color = "#CF80A6", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals") +
theme_economist()
# boxplot comparing birthweights by antiparasitic use and insurance status
ggplot(data = dhs_clean, mapping = aes(y = insured, x = bwkg, fill = paradrug)) +
geom_boxplot() +
theme_economist() +
scale_fill_manual(values = c("#D4C5E2", "#80CFA9")) +
labs(title = "Birthweight (kg) by Antiparasitics and Insured Status",
y = "Insurance Status",
x = "Birth Weight (kg)",
fill = "Antiparasitics While Pregnant")
# barplot comparing birthweight by anemia status and antiparasitic use
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug, labeller = as_labeller(paradrug_labels)) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
summary(unrefined_coremodel)
## several single stratas, merge singles for comparison
# Count PSUs per stratum
psu_counts <- dhs_clean %>%
group_by(strata) %>%
summarize(n_psu = n_distinct(ids))  # Replace 'ids' with your PSU variable name
# List strata with 1 PSU
single_strata <- psu_counts %>% filter(n_psu == 1)
print(single_strata)
single_strata <- c(1023, 3241, 3261, 57221, 57222, 62921, 83823, 84022, 84122, 84223, 84421, 84621, 84622, 84723, 89823)
#mutate
dhs_clean <- dhs_clean %>%
mutate(
strata = ifelse(strata %in% single_strata, 1024, strata)
)
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
summary(unrefined_coremodel)
## Refined core model
coremodel <- sdesign %>%
svyglm(
formula = bwkg ~ paradrug + age + ethnic + educ +
bpast5 + csect + anemia + educ*bpast5,
family = gaussian()
)
summary(coremodel)
## Unweighted coremodel
coremodelunw <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*bpast5)
summary(coremodelunw)
