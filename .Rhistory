#mutate
dhs_clean <- dhs_clean %>%
mutate(
strata = ifelse(strata %in% single_strata, 1024, strata)
)
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
summary(unrefined_coremodel)
## Refined core model
coremodel <- sdesign %>%
svyglm(
formula = bwkg ~ paradrug + age + ethnic + educ +
bpast5 + csect + anemia + educ*bpast5,
family = gaussian()
)
summary(coremodel)
## Unweighted coremodel
coremodelunw <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*bpast5)
summary(coremodelunw)
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cloud.r-project.org"))
options(survey.lonely.psu = "adjust")  # Conservative variance estimation
single_strata <- c(1023, 3241, 3261, 57221, 57222, 62921, 83823, 84022, 84122, 84223, 84421, 84621, 84622, 84723, 89823, 83723)  # Added 83723
dhs_clean <- dhs_clean %>%
mutate(strata = ifelse(strata %in% single_strata, 1024, strata))
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("survey")
library(tidyverse)
library(srvyr)
library(gt)
library(tinytex)
library(naniar)
library(ggthemes)
library(glmnet)
library(olsrr)
library(car)
library(survey)
dhs <- read_csv("~/Documents/GitHub/bios/453/bios453/IAIR7EFL.csv")
install.packages("survey")
dhs_clean <- dhs %>%
select(v005, m60_1, v481, m18_1, m19_1, m17_1, v457, m15_1, v228, v208, v190a, v190, v149, v131, v024, v463aa, v501, v447a, v021, v023) %>%
rename(
ids = v021,
strata = v023,
wsweight = v005,
paradrug = m60_1,
insured = v481,
sizechild = m18_1,
bwkg = m19_1,
csect = m17_1,
anemia = v457,
delivplace = m15_1,
termpreg = v228,
bpast5 = v208,
wind_urbrur = v190a,
wind = v190,
educ = v149,
ethnic = v131,
state = v024,
smokes = v463aa,
married = v501,
age = v447a,
) %>%
filter(
paradrug!=8,
paradrug!=9,
bwkg <5501,
bwkg > 249,
bwkg != 9996,
bwkg != 9998,
bwkg != 9999,
sizechild!=8,
insured != 9,
sizechild != 9,
csect != 9,
anemia != 9,
termpreg != 9,
educ != 9,
smokes != 9,
married != 9,
age != 99,
) %>%
mutate(
wsweight = wsweight/1000000,
paradrug = as.factor(paradrug),
insured = as.factor(insured),
sizechild = factor(sizechild,
levels = c("very large" = "1",
"larger than average" = "2",
"average" = "3",
"smaller than average" = "4",
"very small" = "5")),
csect = factor(csect),
anemia = factor(anemia,
levels = c("severe" = "1",
"moderate" = "2",
"mild" = "3",
"not anemic" = "4")),
delivplace = factor(delivplace),
termpreg = factor(termpreg),
bpast5 = factor(bpast5),
wind = factor(wind,
levels = c("poorest" = "1",
"poorer" = "2",
"middle" = "3",
"richer" = "4",
"richest" = "5")),
educ = factor(educ,
levels = c("none" = "0",
"incomplete primary" = "1",
"complete primary" = "2",
"incomplete secondary" = "3",
"complete secondary" = "4",
"higher" = "5")),
ethnic = factor(ethnic,
levels = c("caste" = "991",
"tribe" = "992",
"no caste/tribe" = "993",
"dont know" = "998")),
smokes = factor(smokes)
)
miss_var_summary(dhs_clean) %>%
arrange(desc(pct_miss))
library(dplyr)
library(tidyr)
library(gt)
# categorical summary
cat_summary <- dhs_clean %>%
select(paradrug, insured, educ) %>%
pivot_longer(everything(), names_to = "variable", values_to = "category") %>%
group_by(variable) %>%
mutate(total = n()) %>%
group_by(variable, category) %>%
summarise(
count = n(),
percent = paste0(round(100 * count / first(total), 1), "%"),
.groups = "drop"
) %>%
arrange(variable, category) %>%
group_by(variable) %>%
mutate(row_id = row_number()) %>%
ungroup()
# summary for numerical variables
num_summary <- dhs_clean %>%
summarise(across(c(age, bwkg),
list(mean = ~round(mean(., na.rm = TRUE), 2),
median = ~round(median(., na.rm = TRUE), 2),
sd = ~round(sd(., na.rm = TRUE), 2)),
.names = "{.col}_{.fn}")) %>%
pivot_longer(everything(), names_to = c("variable", "statistic"), names_sep = "_") %>%
pivot_wider(names_from = statistic, values_from = value) %>%
mutate(row_id = 1)
# merge and gt table
bind_rows(
cat_summary,
num_summary %>% mutate(category = NA, count = NA, percent = NA)
) %>%
arrange(factor(variable, levels = c("paradrug", "insured", "educ", "age", "bwkg"))) %>%
gt(groupname_col = "variable") %>%
tab_header(
title = "Summary Statistics for DHS Dataset",
) %>%
cols_label(
category = "Category",
count = "Count",
percent = "Percentage",
mean = "Mean",
median = "Median",
sd = "Std Dev"
) %>%
fmt_number(
columns = c(mean, median, sd),
decimals = 2
) %>%
cols_align(
align = "center",
columns = c(category, count, percent, mean, median, sd)
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels()
) %>%
tab_style(
style = cell_fill(color = "#C5DECD"),
locations = cells_body(
rows = variable %in% c("paradrug", "insured", "educ")
)
) %>%
fmt_missing(columns = everything(), missing_text = "-") %>%
cols_hide(columns = c(row_id))%>%
tab_options(table.background.color = "#F1F7ED")
# categorical summary
cat_summary <- dhs_clean %>%
select(paradrug, insured, educ) %>%
pivot_longer(everything(), names_to = "variable", values_to = "category") %>%
group_by(variable) %>%
mutate(total = n()) %>%
group_by(variable, category) %>%
summarise(
count = n(),
percent = paste0(round(100 * count / first(total), 1), "%"),
.groups = "drop"
) %>%
arrange(variable, category) %>%
group_by(variable) %>%
mutate(row_id = row_number()) %>%
ungroup()
# summary for numerical variables
num_summary <- dhs_clean %>%
summarise(across(c(age, bwkg),
list(mean = ~round(mean(., na.rm = TRUE), 2),
median = ~round(median(., na.rm = TRUE), 2),
sd = ~round(sd(., na.rm = TRUE), 2)),
.names = "{.col}_{.fn}")) %>%
pivot_longer(everything(), names_to = c("variable", "statistic"), names_sep = "_") %>%
pivot_wider(names_from = statistic, values_from = value) %>%
mutate(row_id = 1)
# merge and gt table
bind_rows(
cat_summary,
num_summary %>% mutate(category = NA, count = NA, percent = NA)
) %>%
arrange(factor(variable, levels = c("paradrug", "insured", "educ", "age", "bwkg"))) %>%
gt(groupname_col = "variable") %>%
tab_header(
title = "Summary Statistics for DHS Dataset",
) %>%
cols_label(
category = "Category",
count = "Count",
percent = "Percentage",
mean = "Mean",
median = "Median",
sd = "Std Dev"
) %>%
fmt_number(
columns = c(mean, median, sd),
decimals = 2
) %>%
cols_align(
align = "center",
columns = c(category, count, percent, mean, median, sd)
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels()
) %>%
tab_style(
style = cell_fill(color = "#C5DECD"),
locations = cells_body(
rows = variable %in% c("paradrug", "insured", "educ")
)
) %>%
fmt_missing(columns = everything(), missing_text = "-") %>%
cols_hide(columns = c(row_id))%>%
tab_options(table.background.color = "#F1F7ED")
# boxplot comparing birthweights by antiparasitic use and insurance status
ggplot(data = dhs_clean, mapping = aes(y = insured, x = bwkg, fill = paradrug)) +
geom_boxplot() +
theme_economist() +
scale_fill_manual(values = c("#D4C5E2", "#80CFA9")) +
labs(title = "Birthweight (kg) by Antiparasitics and Insured Status",
y = "Insurance Status",
x = "Birth Weight (kg)",
fill = "Antiparasitics While Pregnant")
# make labels for facetwrap
paradrug_labels <- c("0" = "No Antiparasitics", "1" = "Yes Antiparasitics")
# barplot comparing birthweight by anemia status and antiparasitic use
ggplot(dhs_clean, aes(x = bwkg, fill = factor(anemia))) +
geom_histogram() +
facet_wrap(~paradrug, labeller = as_labeller(paradrug_labels)) +
scale_fill_manual(
values = c("#46B29B", "#80CFA9", "#D4C5E2", "#CF80A6"),
name = "Anemia Status") +
labs( title = "Birthweight by Anemia Status and Antiparasitic Use During Pregnancy", x = "Birth Weight (kg)", y = "Count") +
theme_few()
## LASSO
# Create predictor matrix (exclude intercept and outcome variable)
x <- model.matrix(bwkg ~ paradrug + insured + csect + anemia + delivplace +
termpreg + bpast5 + wind_urbrur + wind + educ + ethnic +
state + smokes + married + age,
data = dhs_clean)[, -1]  # Remove intercept column
# Outcome variable
y <- dhs_clean$bwkg
# Cross-validate to find optimal lambda (penalty parameter)
set.seed(123)  # For reproducibility
lasso_model <- cv.glmnet(x, y, alpha = 1)  # alpha=1 for LASSO
# Plot cross-validation error
plot(lasso_model)
# Coefficients at lambda.min (retains more variables)
coef(lasso_model, s = "lambda.min")
# Coefficients at lambda.1se (simpler model)
coef(lasso_model, s = "lambda.1se")
## Predictors with non-zero coefficients are deemed important for explaining bwkg. It appears as though paradrug is not... We will include those relavent variables in the regression.
## Check for multicolinearity
vifmod <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia)
vif_values <- vif(vifmod)  # Calculate VIF values
print(vif_values)         # Display VIF values
## VIF are all aprox =1 implying low to no nulticolinearity
options(survey.lonely.psu = "adjust")  # Conservative variance estimation
single_strata <- c(1023, 3241, 3261, 57221, 57222, 62921, 83823, 84022, 84122, 84223, 84421, 84621, 84622, 84723, 89823, 83723)  # Added 83723
dhs_clean <- dhs_clean %>%
mutate(strata = ifelse(strata %in% single_strata, 1024, strata))
## several single stratas, merge singles for comparison
# Count PSUs per stratum
psu_counts <- dhs_clean %>%
group_by(strata) %>%
summarize(n_psu = n_distinct(ids))  # Replace 'ids' with your PSU variable name
# List strata with 1 PSU
single_strata <- psu_counts %>% filter(n_psu == 1)
print(single_strata)
single_strata <- c(1023, 3241, 3261, 57221, 57222, 62921, 83823, 84022, 84122, 84223, 84421, 84621, 84622, 84723, 89823)
#mutate
dhs_clean <- dhs_clean %>%
mutate(
strata = ifelse(strata %in% single_strata, 1024, strata)
)
## Weighting and survey design specification
sdesign <- as_survey_design(
.data = dhs_clean,
ids = ids,
strata = strata,
weights = wsweight
)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable). This core model is weighted.
unrefined_coremodel <- sdesign %>%
svyglm(
formula = bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug+educ*bpast5,
family = gaussian())
summary(unrefined_coremodel)
## Refined core model
coremodel <- sdesign %>%
svyglm(
formula = bwkg ~ paradrug + age + ethnic + educ +
bpast5 + csect + anemia + educ*bpast5,
family = gaussian()
)
summary(coremodel)
## Unweighted coremodel
coremodelunw <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*bpast5)
summary(coremodelunw)
options(survey.lonely.psu = "adjust")  # Conservative variance estimation
single_strata <- c(1023, 3241, 3261, 57221, 57222, 62921, 83823, 84022, 84122, 84223, 84421, 84621, 84622, 84723, 89823, 83723)  # Added 83723
## Q-Q plot for normality.
# Extract residuals from your svyglm model
residuals <- residuals(coremodel)
#plot
ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq(color = "#80CFA9") +
stat_qq_line(color = "#CF80A6", size = 1) +
theme_minimal() +
labs(x = "Theoretical quantiles", y = "Ordered Values",
title = "Normal Q-Q Plot of Residuals") +
theme_economist()
## The residuals generally follow the diagonal line, suggesting that the residuals are approximately normally distributed.However, there is some deviation at the tails (both ends of the plot), which could indicate slight non-normality.This could be related to the large sample size.With very large datasets, the Central Limit Theorem ensures that your coefficient estimates are approximately normally distributed even if residuals aren't perfectly normal
# Perform Durbin-Watson test
durbinWatsonTest(coremodel)
## D-W Statistic = 1.9199: This value is reasonably close to 2 (which indicates no autocorrelation), suggesting a mild positive autocorrelation in your residuals.
## Validation K-Fold
# Define cross-validation method
library(caret)
ctrl <- trainControl(method = "cv", number = 5)
# Train model with k-fold CV
model_cv <- train(
bwkg ~ paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5,  # Include all predictors
data = dhs_clean,
method = "lm",
trControl = ctrl
)
# View average RMSE and R² across folds
print(model_cv$results)
1 - (ss_res / ss_tot)
## Finding $R^2$
weighted_r2 <- function(coremodel) {
y <- coremodel$coremodel[[1]]
w <- weights(coremodel)
pred <- predict(coremodel)
ss_res <- sum(w * (y - pred)^2)
ss_tot <- sum(w * (y - weighted.mean(y, w))^2)
1 - (ss_res / ss_tot)
}
# Usage:
coremodel <- lm(y ~ x, data=df, weights=weights)
# Usage:
coremodel <- lm(y ~ x, data=dhs_clean, weights=weights)
# Usage:
coremodel <- lm(y ~ x, data=dhs_clean, weights=weights)
# Usage:
coremodel <- lm(y ~ x, data=dhs_clean, weights=wweight)
# Usage:
coremodel <- lm(y ~ x, data=dhs_clean, weights=wweights)
# Usage:
coremodel <- lm(y ~ x, data=dhs_clean, weights=wsweight)
weighted_r2(coremodel)
## Finding $R^2$
weighted_r2 <- function(model) {
# Proper data extraction from model object
y <- model.response(model.frame(model))  # Correct response variable
w <- weights(model, type = "prior")      # Proper weight extraction
pred <- predict(model)
# NA handling (critical for survey models)
valid <- complete.cases(y, pred, w)
y <- y[valid]
pred <- pred[valid]
w <- w[valid]
ss_res <- sum(w * (y - pred)^2)
ss_tot <- sum(w * (y - weighted.mean(y, w))^2)
1 - (ss_res / ss_tot)
}
# Usage with survey model
coremodel <- svyglm(bwkg ~ paradrug + age,
design = sdesign,
family = gaussian())
weighted_r2(coremodel)  # Now works with svyglm objects
cor_weighted <- cov.wt(
cbind(y, predict(model)),
wt = weights(model),
cor = TRUE
)$cor[1,2]
weighted_r2 <- function(model) {
# Proper data extraction from model object
y <- model.response(model.frame(model))  # Correct response variable
w <- weights(model, type = "prior")      # Proper weight extraction
pred <- predict(model)
# NA handling (critical for survey models)
valid <- complete.cases(y, pred, w)
y <- y[valid]
pred <- pred[valid]
w <- w[valid]
ss_res <- sum(w * (y - pred)^2)
ss_tot <- sum(w * (y - weighted.mean(y, w))^2)
1 - (ss_res / ss_tot)
}
# Usage with survey model
coremodel <- svyglm(bwkg ~ paradrug + age,
design = sdesign,
family = gaussian())
weighted_r2(coremodel)  # Now works with svyglm objects
cor_weighted <- cov.wt(
cbind(y, predict(model)),
wt = weights(model),
cor = TRUE
)$cor[1,2]
cor_weighted <- cov.wt(
cbind(y, predict(coremodel)),
wt = weights(model),
cor = TRUE
)$cor[1,2]
cor_weighted <- cov.wt(
cbind(y, predict(coremodel)),
wt = weights(coremodel),
cor = TRUE
)$cor[1,2]
r2_cor <- cor_weighted^2
print(r2_cor)
summary(coremodelunw)
# Perform Durbin-Watson test
durbinWatsonTest(coremodel)
# Usage with survey model
coremodel <- svyglm(bwkg ~ paradrug + age,
design = sdesign,
family = gaussian())
weighted_r2(coremodel)  # Now works with svyglm objects
## Validation K-Fold
# Define cross-validation method
ctrl <- trainControl(method = "cv", number = 5)
# Train model with k-fold CV
model_cv <- train(
bwkg ~ paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5,  # Include all predictors
data = dhs_clean,
method = "lm",
trControl = ctrl
)
# Train model with k-fold CV
model_cv <- train(
bwkg ~ paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5,  # Include all predictors
data = dhs_clean,
method = "lm",
trControl = ctrl
)
# View average RMSE and R² across folds
print(model_cv$results)
