insured = as.factor(insured),
sizechild = factor(sizechild,
levels = c("very large" = "1",
"larger than average" = "2",
"average" = "3",
"smaller than average" = "4",
"very small" = "5")),
csect = factor(csect),
anemia = factor(anemia,
levels = c("severe" = "1",
"moderate" = "2",
"mild" = "3",
"not anemic" = "4")),
delivplace = factor(delivplace),
termpreg = factor(termpreg),
bpast5 = factor(bpast5),
wind = factor(wind,
levels = c("poorest" = "1",
"poorer" = "2",
"middle" = "3",
"richer" = "4",
"richest" = "5")),
educ = factor(educ,
levels = c("none" = "0",
"incomplete primary" = "1",
"complete primary" = "2",
"incomplete secondary" = "3",
"complete secondary" = "4",
"higher" = "5")),
ethnic = factor(ethnic,
levels = c("caste" = "991",
"tribe" = "992",
"no caste/tribe" = "993",
"dont know" = "998")),
smokes = factor(smokes)
)
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cloud.r-project.org"))
library(tidyverse)
library(gt)
library(tinytex)
library(naniar)
library(ggthemes)
library(glmnet)
dhs <- read_csv("~/Documents/GitHub/bios/453/bios453/IAIR7EFL.csv")
dhs_clean <- dhs %>%
select(m60_1, v481, m18_1, m19_1, m17_1, v457, m15_1, v228, v208, v190a, v190, v149, v131, v024, v463aa, v501, v447a) %>%
rename(
paradrug = m60_1,
insured = v481,
sizechild = m18_1,
bwkg = m19_1,
csect = m17_1,
anemia = v457,
delivplace = m15_1,
termpreg = v228,
bpast5 = v208,
wind_urbrur = v190a,
wind = v190,
educ = v149,
ethnic = v131,
state = v024,
smokes = v463aa,
married = v501,
age = v447a,
) %>%
filter(
paradrug!=8,
paradrug!=9,
bwkg <5501,
bwkg > 249,
bwkg != 9996,
bwkg != 9998,
bwkg != 9999,
sizechild!=8,
insured != 9,
sizechild != 9,
csect != 9,
anemia != 9,
termpreg != 9,
educ != 9,
smokes != 9,
married != 9,
age != 99,
) %>%
mutate(
paradrug = as.factor(paradrug),
insured = as.factor(insured),
sizechild = factor(sizechild,
levels = c("very large" = "1",
"larger than average" = "2",
"average" = "3",
"smaller than average" = "4",
"very small" = "5")),
csect = factor(csect),
anemia = factor(anemia,
levels = c("severe" = "1",
"moderate" = "2",
"mild" = "3",
"not anemic" = "4")),
delivplace = factor(delivplace),
termpreg = factor(termpreg),
bpast5 = factor(bpast5),
wind = factor(wind,
levels = c("poorest" = "1",
"poorer" = "2",
"middle" = "3",
"richer" = "4",
"richest" = "5")),
educ = factor(educ,
levels = c("none" = "0",
"incomplete primary" = "1",
"complete primary" = "2",
"incomplete secondary" = "3",
"complete secondary" = "4",
"higher" = "5")),
ethnic = factor(ethnic,
levels = c("caste" = "991",
"tribe" = "992",
"no caste/tribe" = "993",
"dont know" = "998")),
smokes = factor(smokes)
)
miss_var_summary(dhs_clean) %>%
arrange(desc(pct_miss))
library(dplyr)
library(tidyr)
library(gt)
# categorical summary
cat_summary <- dhs_clean %>%
select(paradrug, insured, educ) %>%
pivot_longer(everything(), names_to = "variable", values_to = "category") %>%
group_by(variable) %>%
mutate(total = n()) %>%
group_by(variable, category) %>%
summarise(
count = n(),
percent = paste0(round(100 * count / first(total), 1), "%"),
.groups = "drop"
) %>%
arrange(variable, category) %>%
group_by(variable) %>%
mutate(row_id = row_number()) %>%
ungroup()
# summary for numerical variables
num_summary <- dhs_clean %>%
summarise(across(c(age, bwkg),
list(mean = ~round(mean(., na.rm = TRUE), 2),
median = ~round(median(., na.rm = TRUE), 2),
sd = ~round(sd(., na.rm = TRUE), 2)),
.names = "{.col}_{.fn}")) %>%
pivot_longer(everything(), names_to = c("variable", "statistic"), names_sep = "_") %>%
pivot_wider(names_from = statistic, values_from = value) %>%
mutate(row_id = 1)
# merge and gt table
bind_rows(
cat_summary,
num_summary %>% mutate(category = NA, count = NA, percent = NA)
) %>%
arrange(factor(variable, levels = c("paradrug", "insured", "educ", "age", "bwkg"))) %>%
gt(groupname_col = "variable") %>%
tab_header(
title = "Summary Statistics for DHS Dataset",
) %>%
cols_label(
category = "Category",
count = "Count",
percent = "Percentage",
mean = "Mean",
median = "Median",
sd = "Std Dev"
) %>%
fmt_number(
columns = c(mean, median, sd),
decimals = 2
) %>%
cols_align(
align = "center",
columns = c(category, count, percent, mean, median, sd)
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels()
) %>%
tab_style(
style = cell_fill(color = "#C5DECD"),
locations = cells_body(
rows = variable %in% c("paradrug", "insured", "educ")
)
) %>%
fmt_missing(columns = everything(), missing_text = "-") %>%
cols_hide(columns = c(row_id))%>%
tab_options(table.background.color = "#F1F7ED")
model=lm(bwkg ~paradrug+insured+csect+anemia+delivplace+termpreg+bpast5+wind_urbrur+wind+educ+ethnic+state+smokes+married+age, data = dhs_clean)
ols_step_all_possible(model)
library(olsrr)
model=lm(bwkg ~paradrug+insured+csect+anemia+delivplace+termpreg+bpast5+wind_urbrur+wind+educ+ethnic+state+smokes+married+age, data = dhs_clean)
ols_step_all_possible(model)
ols_step_best_subset(model)
full_model <- lm(bwkg ~ paradrug + insured + csect + anemia + delivplace +
termpreg + bpast5 + wind_urbrur + wind + educ + ethnic +
state + smokes + married + age, data = dhs_clean)
step_model <- step(full_model, direction = "both")
## LASSO
# Create predictor matrix (exclude intercept and outcome variable)
x <- model.matrix(bwkg ~ paradrug + insured + csect + anemia + delivplace +
termpreg + bpast5 + wind_urbrur + wind + educ + ethnic +
state + smokes + married + age,
data = dhs_clean)[, -1]  # Remove intercept column
# Outcome variable
y <- dhs_clean$bwkg
# Cross-validate to find optimal lambda (penalty parameter)
set.seed(123)  # For reproducibility
lasso_model <- cv.glmnet(x, y, alpha = 1)  # alpha=1 for LASSO
lasso_model <- cv.glmnet(x, y, alpha = 1)  # alpha=1 for LASSO
# Plot cross-validation error
plot(lasso_model)
# Coefficients at lambda.min (retains more variables)
coef(lasso_model, s = "lambda.min")
# Coefficients at lambda.1se (simpler model)
coef(lasso_model, s = "lambda.1se")
# Get retained predictors (using lambda.1se for simplicity)
retained_vars <- rownames(coef(lasso_model, s = "lambda.1se"))[coef(lasso_model, s = "lambda.1se")[,1] != 0]
retained_vars <- retained_vars[-1]  # Remove intercept
# Fit final model
final_model <- lm(bwkg ~ ., data = dhs_clean[, c("bwkg", retained_vars)])
summary(final_model)
# Coefficients at lambda.1se (simpler model)
coef(lasso_model, s = "lambda.1se")
coremodel <- ln(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia)
coremodel <- glm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia)
summary(coremodel)
## Predictors with non-zero coefficients are deemed important for explaining bwkg. It appears as though paradrug is not... We will include those relavent variables in the regression.
## Now check for multicolinearity among predictors.
vif_values <- vif(coremodel)
## Now check for multicolinearity among predictors.
library(car)
vif_values <- vif(model)
print(vif_values)
# Visualize VIF values
barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue")
## Check other MLR assumptions
plot(model, which = 1)
## Check other MLR assumptions
plot(coremodel, which = 1)
plot(coremodel, which = 2)  # Q-Q plot
shapiro.test(residuals(coremodel))  # Shapiro-Wilk test
durbinWatsonTest(coremodel)  # Perform Durbin-Watson test
plot(coremodel, which = 2)  # Q-Q plot
## Check other MLR assumptions
plot(coremodel, which = 1)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+paradrug*anemia)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*csect)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*age)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*bpast4)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*bpast5)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+educ*paradrug)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+csect*paradrug)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+anemia*paradrug)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+ethnic*paradrug)
summary(coremodel)
# Add interaction terms
model_with_interactions <- lm(bwkg ~ paradrug * age + educ * bpast5 + csect * anemia, data = dhs_clean)
# Check significance of interaction terms
summary(model_with_interactions)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ+agepast5)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ+bpast5)
summary(coremodel)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ+bpast5)
summary(coremodel)
## Now check for multicolinearity among predictors.
library(car)
vif_values <- vif(model)
print(vif_values)
vif_values <- vif(coremodel)
print(vif_values)
vif_values <- vif(coremodel)
vif_values <- vif(coremodel, type = predictor)
vif_values <- vif(coremodel, type = 'predictor')
print(vif_values)
vif_values <- vif(coremodel, type = 'predictor')
print(vif_values)
## Check other MLR assumptions
plot(coremodel, which = 1)
vif_values <- vif(coremodel, type = 'predictor')
print(vif_values)
## Check other MLR assumptions
plot(coremodel, which = 1)
plot(coremodel, which = 2)  # Q-Q plot
## The residuals generally follow the diagonal line, suggesting that the residuals are approximately normally distributed.However, there is some deviation at the tails (both ends of the plot), which could indicate slight non-normality.This could be related to the large sample size.
durbinWatsonTest(coremodel)  # Perform Durbin-Watson test
interact_plot(coremodel, pred = "paradrug", modx = "age")
interact_plot(coremodel, pred = "paradrug", modx = "age")
## Check for multicolinearity among predictors.
vif_values <- vif(coremodel, type = 'predictor')
print(vif_values)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5)
summary(coremodel)
## Check for multicolinearity among predictors.
vif_values <- vif(coremodel, type = 'predictor')
print(vif_values)
## Check other MLR assumptions
plot(coremodel, which = 1)
## Check other MLR assumptions
plot(coremodel, which = 1)
plot(coremodel, which = 2)  # Q-Q plot
## Check other MLR assumptions
plot(coremodel, which = 1)
plot(coremodel, which = 2)  # Q-Q plot
## The residuals generally follow the diagonal line, suggesting that the residuals are approximately normally distributed.However, there is some deviation at the tails (both ends of the plot), which could indicate slight non-normality.This could be related to the large sample size.
durbinWatsonTest(coremodel)  # Perform Durbin-Watson test
## Check for multicolinearity among predictors.
vif_values <- vif(coremodel, type = 'predictor')
print(vif_values)
## Check other MLR assumptions
plot(coremodel, which = 1)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug)
summary(coremodel)
## Check for multicolinearity among predictors.
vif_values <- vif(coremodel, type = 'predictor')
print(vif_values)
## Check other MLR assumptions
plot(coremodel, which = 1)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5)
## Check other MLR assumptions
plot(coremodel, which = 1)
plot(coremodel, which = 2)  # Q-Q plot
## Check other MLR assumptions
plot(coremodel, which = 1)
plot(coremodel, which = 2)  # Q-Q plot
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5)
summary(coremodel)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable)
coremodel <- lm(data = dhs_clean, log(bwkg)~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5)
summary(coremodel)
## Run main regression. Included interraction terms for age*paradrug and educ*bpast5 due to suspected interractions between them and their effect on bwkg, both contain statistically significant outputs. I should include the second interraction term because it's theoretically meaningful (e.g., if it makes sense that the effect of paradrug would vary by age or another variable)
coremodel <- lm(data = dhs_clean, bwkg~paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5)
summary(coremodel)
## Validation K-Fold
# Define cross-validation method
ctrl <- trainControl(method = "cv", number = 5)
## Validation K-Fold
# Define cross-validation method
library(caret)
ctrl <- trainControl(method = "cv", number = 5)
# Train model with k-fold CV
model_cv <- train(
bwkg ~ paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5,  # Include all predictors
data = your_data,
method = "lm",
trControl = ctrl
)
# Train model with k-fold CV
model_cv <- train(
bwkg ~ paradrug+age+ethnic+educ+bpast5+csect+anemia+age*paradrug+educ*bpast5,  # Include all predictors
data = dhs_clean,
method = "lm",
trControl = ctrl
)
# View average RMSE and R² across folds
print(model_cv$results)
ggplot(data = dhs_clean, mapping = aes(y = bwkg, x = age, color = paradrug)) +
geom_point()
ggplot(data = dhs_clean, mapping = aes(y = bwkg, x = age, color = paradrug)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = dhs_clean, mapping = aes(y = bwkg, x = age, color = bpast5)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = dhs_clean, mapping = aes(y = bwkg, x = age, color = educ)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = dhs_clean, mapping = aes(y = bwkg, x = age, color = educ)) +
geom_bar() +
geom_smooth(method = "lm")
ggplot(data = dhs_clean, mapping = aes(y = bwkg, x = age, color = educ)) +
geom_bar()
ggplot(data = dhs_clean, mapping = aes(y = bwkg, x = age, fill = educ)) +
geom_bar()
ggplot(data = dhs_clean, mapping = aes(y = bwkg, fill = educ)) +
geom_bar()
ggplot(data = dhs_clean, mapping = aes(y = bwkg, fill = bpast5)) +
geom_bar()
ggplot(data = dhs_clean, mapping = aes(y = bwkg, fill = bpast5)) +
geom_histogram()
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = bpast5)) +
geom_histogram()
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = educ)) +
geom_histogram()
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = educ+ color = paradrug)) +
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = educ, color = paradrug)) +
geom_histogram()
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = educ)) +
geom_histogram()
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = anemia)) +
geom_histogram()
ggplot(data = dhs_clean, mapping = aes(x = bwkg, fill = anemia)) +
geom_histogram() +
facet_wrap(~paradrug)
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
library(haven)
library("survey")
library("jtools")
install.packages("jtools")
install.packages("jtools")
library(haven)
library("survey")
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
install.packages("jtools")
library(haven)
library("survey")
library("jtools")
library("remotes")
library("svrepmisc")
install.packages("svrepmisc")
install.packages("jtools")
install.packages("svrepmisc")
library(haven)
library("survey")
library("jtools")
library("remotes")
library("svrepmisc")
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
install.packages("jtools")
install.packages("svrepmisc")
library(haven)
library("survey")
library("jtools")
library("remotes")
library("svrepmisc")
install.packages("jtools")
install.packages("svrep")
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
install.packages("jtools")
install.packages("svrep")
library(haven)
library("survey")
library("jtools")
library("remotes")
library("svrepmisc")
install.packages("jtools")
install.packages("svrep")
library(haven)
library("survey")
library("jtools")
library("remotes")
library("svrep")
library(gtsummary)
library(tidyverse)
library(knitr)
library(readr)
library(foreign)
library(plyr)
library(Hmisc)
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
install.packages("jtools")
install.packages("svrep")
library(haven)
library("survey")
library("jtools")
library("remotes")
library("svrep")
library(gtsummary)
library(tidyverse)
library(knitr)
library(readr)
library(foreign)
library(plyr)
library(Hmisc)
install.packages("jtools")
install.packages("svrep")
install.packages("Hmisc")
library(haven)
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
install.packages("jtools")
install.packages("svrep")
install.packages("Hmisc")
library(haven)
library("survey")
library("jtools")
library("remotes")
library("svrep")
library(gtsummary)
library(tidyverse)
library(knitr)
library(readr)
library(foreign)
library(plyr)
library(Hmisc)
dhs=read_csv("IAIR7EFL.csv")
install.packages("Hmisc")
knitr::opts_chunk$set(echo = FALSE,message=FALSE,warning = FALSE)
dhs=read_csv("IAIR7EFL.csv")
library(tidyverse)
dhs=read_csv("IAIR7EFL.csv")
